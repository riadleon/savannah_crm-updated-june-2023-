# Generated by Django 3.1.2 on 2022-02-03 20:24
import re
import urllib
import datetime
from django.db import migrations

URL_MATCHER = re.compile(r"(https?://[0-9a-zA-Z.-]+(:[0-9]+)?(/[^\s|()<>'\"]*)?)")
ACTIVE = 1
SUSPENDED = 2

def noop(apps, schema_editor):
    pass

def find_links_in_conversations(apps, schema_editor):
    Community = apps.get_model('corm', 'Community')
    Conversation = apps.get_model('corm', 'Conversation')
    Hyperlink = apps.get_model('corm', 'Hyperlink')
    for community in Community.objects.filter(status__in=[ACTIVE, SUSPENDED]):
        print("Finding links for %s" % community.name)

        for convo in Conversation.objects.filter(speaker__community=community, timestamp__gte=datetime.datetime.utcnow() - datetime.timedelta(days=366)).order_by('-timestamp'):
            content = convo.content
            if not content:
                continue;
            for link in [x[0] for x in URL_MATCHER.findall(convo.content)]:
                try:
                    url = urllib.parse.urlparse(link)
                    if not url.hostname or not url.scheme:
                        continue

                    # Clean hostname
                    host = url.hostname
                    host_parts = host.split('.')
                    if len(host_parts) > 2:
                        try:
                            int(host_parts[-3])
                            pass # host is an IP
                        except:
                            try:
                                int(host_parts[-3]['0'])
                                # 3-rd level subdomain starts with a number and is likely generated
                                host = '.'.join(host_parts[-2:])
                            except:
                                pass
                    if host[:4] == 'www.':
                        host = host[4:] # Ignore www subdomains
                    # Determine content type
                    ctype = None
                    if url.path is not None and url.path != '':
                        ext = url.path.split('.')[-1].lower()
                        if ext in ['html', 'htm']:
                            ctype = 'Webpage'
                        elif ext in ['png', 'jpg', 'jpeg', 'gif', 'svg'] or host in ['i.imgur.com', 'media.giphy.com', 'i.reddit.com']:
                            ctype = 'Image'
                        elif ext in ['zip', 'tar', 'gz', 'xz']:
                            ctype = 'Archive'
                        elif ext in ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx']:
                            ctype = 'Document'
                        elif ext in ['py', 'rs', 'go', 'cpp', 'php', 'rb', 'js', 'ts']:
                            ctype = 'Code'
                        elif ext in ['py', 'rs', 'go', 'cpp', 'php', 'rb', 'js', 'ts']:
                            ctype = 'Code'
                        elif host in ['youtube.com', 'youtu.be', 'vimeo.com', 'twitch.com', 'v.reddit.com']:
                            ctype = 'Video'
                        else:
                            ctype = 'Webpage'
                    hl, created = Hyperlink.objects.get_or_create(
                        community=community,
                        url=link,
                        defaults={
                            'host':host,
                            'path':url.path or '/',
                            'content_type': ctype,
                        }
                    )
                    convo.links.add(hl)
                except:
                    pass # Keep going even if capturing the hyperlink fails

class Migration(migrations.Migration):

    dependencies = [
        ('corm', '0134_auto_20220202_1713'),
    ]

    operations = [
        migrations.RunPython(find_links_in_conversations, noop),
    ]
